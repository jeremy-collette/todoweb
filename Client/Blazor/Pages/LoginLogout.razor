@using todoweb.Client.Models
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

@if (loggedInUser == null)
{
    <b>Login</b>
    <p>Or click here to <a href="/register"><b>register</b></a> a new account.</p>
    <EditForm Model="@formUser" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>Email:</label><InputText id="email" @bind-Value="@formUser.Email" /><br />
        <label>Password:</label><input type="password" @bind="@formUser.Password" /><br />
        <button type="submit">Login</button>
    </EditForm>
}
else
{
    <p>Hello, @loggedInUser.Email! <button @onclick="@HandleLogout">Logout</button> <a href="/profile"><button>Profile</button></a></p>
}

@code {
    [Parameter]
    private Action OnLogin { get; set; } = () => { };

    [Parameter]
    private Action OnLogout { get; set; } = () => { };


    private IUserClient GetUserClient()
    {
        return ClientFactory.CreateUserClient(httpClient);
    }

    User loggedInUser;
    protected override async Task OnInitAsync()
    {
        try
        {
            loggedInUser = await GetUserClient().GetCurrentAsync();
        }
        catch
        {
            // Do nothing
        }
    }

    User formUser = new User();
    private async void HandleSubmit()
    {
        try
        {
            loggedInUser = await GetUserClient().LoginAsync(formUser);
        }
        catch
        {
            jsRuntime.ShowAlert($"Login failed!");
        }
        this.OnLogin.Invoke();
        this.StateHasChanged();
    }

    private async void HandleLogout()
    {
        try
        {
            await GetUserClient().LogoutAsync();
            loggedInUser = null;
        }
        catch
        {
            jsRuntime.ShowAlert("Logout failed!");
        }
        this.OnLogout.Invoke();
        this.StateHasChanged();
    }
}