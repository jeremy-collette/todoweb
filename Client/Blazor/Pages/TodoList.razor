@using todoweb.Client.Models
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<div>
    <p><b>@Title</b></p>
    @if (this.Todos.Count == 0)
    {
        <div style="padding-left:20px">
            <p><i>There are currently no TODOs.</i></p>
        </div>
    }
    <ul>
        @foreach (var todo in Todos)
        {
            if (IsBeingEdited(todo))
            {
                <li>
                    <EditForm Model="@todo">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <InputText id="title" @bind-Value="@todo.Title" />
                        <label>Completed:</label><InputCheckbox Id="done" @bind-Value="@todo.Done" />
                        <button @onclick="@(() => HandleEditToggle(todo))">Cancel</button>
                        <button @onclick="@(() => HandleDelete(todo))">Delete</button>
                        <button @onclick="@(() => HandleEdit(todo))" type="submit">Save</button>
                    </EditForm>
                </li>
            }
            else
            {
                <li>
                    @todo.Title
                    <button @onclick="@(() => HandleEditToggle(todo))">Edit</button>
                    @if (EnableComplete)
                    {
                        <button @onclick="@(() => HandleCompletion(todo))">Complete</button>
                    }
                </li>
            }

        }
    </ul>
</div>

@functions {
    [Parameter]
    private string Title { get; set; }

    [Parameter]
    private ICollection<Todo> Todos { get; set; }

    [Parameter]
    private Action OnEdit { get; set; }

    [Parameter]
    private bool EnableComplete { get; set; }

    private ITodoClient GetTodoClient()
    {
        return ClientFactory.CreateTodoClient(httpClient);
    }

    private IUserClient GetUserClient()
    {
        return ClientFactory.CreateUserClient(httpClient);
    }

    private async void HandleDelete(Todo todo)
    {
        try
        {
            await GetTodoClient().DeleteAsync(todo.Id);
        }
        catch
        {
            jsRuntime.ShowAlert("Error deleting TODO!");
        }

        this.Todos.Remove(todo);
        this.StateHasChanged();
    }

    ISet<string> beingEdited = new HashSet<string>();
    private bool IsBeingEdited(Todo todo)
    {
        return beingEdited.Contains(todo.Id);
    }

    private async void HandleEdit(Todo todo)
    {
        try
        {
            await GetTodoClient().CreateOrUpdateAsync(todo.Id, todo);
        }
        catch
        {
            jsRuntime.ShowAlert("Error updating TODO!");
        }
        this.HandleEditToggle(todo);
        this.OnEdit.Invoke();
    }

    private void HandleEditToggle(Todo todo)
    {
        if (beingEdited.Contains(todo.Id))
        {
            beingEdited.Remove(todo.Id);
        }
        else
        {
            beingEdited.Add(todo.Id);
        }
        this.StateHasChanged();
    }

    private async void HandleCompletion(Todo todo)
    {
        try
        {
            await GetTodoClient().CompleteAsync(todo.Id);
        }
        catch
        {
            jsRuntime.ShowAlert("Error completing TODO!");
        }
        this.StateHasChanged();
        this.OnEdit.Invoke();
    }
}