@page "/"
@using todoweb.Client
@using todoweb.Client.Models
@inject HttpClient httpClient

<h1>todoweb</h1>

@if (loaded == false)
{
    <p><em>Loading...</em></p>
}
else
{
    if (loggedInUser == null)
    {
        <p>Please <a href="/bzr/login">login</a>.</p>
    }
    else
    {
        <p>Hello, @loggedInUser.Email</p>
        <p>Your current TODOs are:</p>
        <ul>
            @foreach (var todo in todos)
            {
                <li>@todo.Title <button onclick="@(() => HandleDelete(todo.Id))">Delete</button></li>
            }
        </ul>

        <b>Create new TODO:</b>
        <EditForm Model="@newTodo" OnValidSubmit="@HandleNewTodo">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="title" bind-Value="@newTodo.Title" />
            <button type="submit">Submit</button>
        </EditForm>
    }
}

@functions {
    private ITodoClient GetTodoClient()
    {
        return new TodoClient(httpClient);
    }

    private IUserClient GetUserClient()
    {
        return new UserClient(httpClient);
    }

    User loggedInUser;
    private async Task FetchLoggedInUser()
    {
        try
        {
            loggedInUser = await GetUserClient().GetCurrentAsync();
        }
        catch
        {
            // Do nothing
        }
    }

    ICollection<Todo> todos;
    private async Task FetchTodos()
    {
        try
        {
            todos = await GetTodoClient().GetAllAsync();
        }
        catch
        {
            // Do nothing
        }
    }

    bool loaded = false;
    protected override async Task OnInitAsync()
    {
        await FetchLoggedInUser();

        if (loggedInUser != null)
        {
            await FetchTodos();
        }

        loaded = true;
        this.StateHasChanged();
    }

    Todo newTodo = new Todo();
    private async void HandleNewTodo()
    {
        await GetTodoClient().CreateAsync(newTodo);
        newTodo = new Todo();

        await FetchTodos();
        this.StateHasChanged();
    }

    private async void HandleDelete(Guid id)
    {
        await GetTodoClient().DeleteAsync(id);
        await FetchTodos();
        this.StateHasChanged();
    }
}
