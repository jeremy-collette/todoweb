@page "/login"
@using todoweb.Client.Models
@inject HttpClient httpClient

<h1>todoweb</h1>

@if (loggedInUser == null)
{
    <b>Login:</b><br/>
    <EditForm Model="@formUser" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>Email:</label><InputText id="email" @bind-Value="@formUser.Email" /><br />
        <label>Password:</label><InputText id="password" @bind-Value="@formUser.Password" /><br />
        <label>Create?</label><InputCheckbox Id="create" @bind-Value="@createUser" /><br />
        <button type="submit">Submit</button>
    </EditForm>
}
else
{
    <p>Hello, @loggedInUser.Email!</p>
    <button @onclick="@HandleLogout">Logout</button>
}

@code {
    private IUserClient GetUserClient()
    {
        return ClientFactory.CreateUserClient(httpClient);
    }

    User loggedInUser;
    protected override async Task OnInitAsync()
    {
        try
        {
            loggedInUser = await GetUserClient().GetCurrentAsync();
        }
        catch
        {
            // Do nothing
        }
    }

    User formUser = new User();
    bool createUser = false;
    private async void HandleLogin()
    {
        try
        {
            if (createUser)
            {
                await GetUserClient().CreateAsync(formUser);
            }
            loggedInUser = await GetUserClient().LoginAsync(formUser);
        }
        catch
        {
            // Do nothing
        }
        this.StateHasChanged();
    }

    private async void HandleLogout()
    {
        try
        {
            await GetUserClient().LogoutAsync();
            loggedInUser = null;
        }
        catch
        {
            // Do nothing
        }
        this.StateHasChanged();
    }
}
