@using todoweb.Client.Models
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

@if (loggedInUser == null)
{
    <b>@(isRegistering ? "Register" : "Login")</b>
    <p><a @onclick="@ToggleRegister">Or click here to @(isRegistering ? "login" : "register").</a></p>
    <EditForm Model="@formUser" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>Email:</label><InputText id="email" @bind-Value="@formUser.Email" /><br />
        <label>Password:</label><input type="password" @bind="@formUser.Password" /><br />
        @if (isRegistering)
        {
            <label>Confirm password:</label><input type="password" @bind="@confirmPassword" /><br />
        }
        <button type="submit">@(isRegistering ? "Register" : "Submit")</button>
    </EditForm>
}
else
{
    <p>Hello, @loggedInUser.Email! <button @onclick="@HandleLogout">Logout</button></p>
}

@code {
    [Parameter]
    private Action OnLogin { get; set; }

    [Parameter]
    private Action OnLogout { get; set; }

    private IUserClient GetUserClient()
    {
        return ClientFactory.CreateUserClient(httpClient);
    }

    User loggedInUser;
    protected override async Task OnInitAsync()
    {
        try
        {
            loggedInUser = await GetUserClient().GetCurrentAsync();
        }
        catch
        {
            // Do nothing
        }
    }

    User formUser = new User();
    string confirmPassword;
    private async void HandleSubmit()
    {
        try
        {
            if (isRegistering)
            {
                if (formUser.Password != confirmPassword)
                {
                    jsRuntime.ShowAlert("Passwords do not match!");
                    return;
                }
                await GetUserClient().CreateAsync(formUser);
            }
            loggedInUser = await GetUserClient().LoginAsync(formUser);
        }
        catch
        {
            jsRuntime.ShowAlert($"{(isRegistering ? "Registration" : "Login")} failed!");
        }
        this.OnLogin.Invoke();
        this.StateHasChanged();
    }

    private async void HandleLogout()
    {
        try
        {
            await GetUserClient().LogoutAsync();
            loggedInUser = null;
        }
        catch
        {
            jsRuntime.ShowAlert("Logout failed!");
        }
        this.OnLogout.Invoke();
        this.StateHasChanged();
    }

    bool isRegistering = false;
    private void ToggleRegister()
    {
        isRegistering = !isRegistering;
    }
}
