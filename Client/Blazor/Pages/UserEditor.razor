@using todoweb.Client.Models
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<b>Edit User</b>
<EditForm Model="@this.FormUser" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>Email:</label><InputText id="email" @bind-Value="@this.FormUser.Email" /><br />
    <label>Password:</label><input type="password" @bind="@this.FormUser.Password" /><br />
    <label>Confirm password:</label><input type="password" @bind="@confirmPassword" /><br />
    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    private Action OnSubmit { get; set; }

    [Parameter]
    private User FormUser { get; set; } = new User();

    private IUserClient GetUserClient()
    {
        return ClientFactory.CreateUserClient(httpClient);
    }

    string confirmPassword;
    private async void HandleSubmit()
    {
        try
        {
            if (this.FormUser.Password != confirmPassword)
            {
                jsRuntime.ShowAlert("Passwords do not match!");
                return;
            }

            if (this.FormUser.Id == Guid.Empty)
            {
                await GetUserClient().CreateAsync(this.FormUser);
            }
            else
            {
                await GetUserClient().CreateOrUpdateAsync(this.FormUser.Id, this.FormUser);
            }
            await GetUserClient().LoginAsync(this.FormUser);
        }
        catch
        {
            jsRuntime.ShowAlert($"User update failed!");
        }
        this.OnSubmit.Invoke();
        this.StateHasChanged();
    }

    protected override Task OnInitAsync()
    {
        this.StateHasChanged();
        return Task.CompletedTask;
    }

}
